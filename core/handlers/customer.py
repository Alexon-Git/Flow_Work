import math
import random
import datetime
import asyncio
from datetime import date
from geopy.geocoders import Nominatim

from aiogram import Router, types,F,Bot
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.state import StatesGroup, State

from core.settings import city_info,settings
from core.keyboards.reply import *
from core.filters.Filters import *
from core.database import database
from core.keyboards.inline import *
from core.statistics.basic import set_city_stat
from core.handlers.basic import start_call_handler
from core.message.text import get_text_start_mess, get_bet

router = Router()
#group_id = -1002057238567
group_id = -4168135619
geolocator = Nominatim(user_agent="Flow_Work.bot")


class CustomerRegistration(StatesGroup):
    fio = State()
    organization = State()
    city = State()
    email = State()
    phone = State()
    n=()

class NewForm(StatesGroup):
    city = State()
    store_name = State()
    adress_a = State()
    adress_b = State()
    cash = State()
    n = ()
    last_msg = ()
class Location(StatesGroup):
    request_info = State()
    location = State()
    translation = State()
    message = State()
    chat_id = State()
    message_to_chat =()
    customer_message_id= ()

class ChatState(StatesGroup):
    message=State()
    info = State()

# @router.message(Command(commands=["testmenu"]))
# async def testmenu(message:Message):
#     text = ""
#     text+="‚ï≠ üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞:</b>\n"
#     text+="‚îú  üìÑ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: </b>0\n"
#     text+="‚ï∞ üìù <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: </b>0\n"
#     text+="‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
#     text+="‚ï≠ ‚úèÔ∏è <b>–§–ò–û:</b> –ö—É–ª–∞–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á\n"
#     text+="‚îú  üíº <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: </b>NIL\n"
#     text+="‚ï∞ üèôÔ∏è <b>–ì–æ—Ä–æ–¥: </b>–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\n"
#     text+="‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
#     text+="üïí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: 2023-03-17"
#
#     await message.answer(text)



#===================================–ú–µ–Ω—é –ó–∞–∫–∞–∑—á–∏–∫–∞===================================
@router.callback_query(F.data=="customer")
async def customer_callback(callback: types.CallbackQuery,bot:Bot):
    if await database.check_customer(user_id = callback.from_user.id):
        builder = create_customer_buttons(True)
        message = f"–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é."
    else:
        message = "–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞—è–≤–æ–∫"
        builder = create_customer_buttons(False)
    await callback.message.edit_text(text= message,reply_markup=builder.as_markup())
    
    
    
#===================================–ö–æ–ª–±–µ–∫ –ú–µ–Ω—é –ó–∞–∫–∞–∑—á–∏–∫–∞===================================
@router.callback_query(F.data.startswith("customer_"))
async def customer_button_callback(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    await callback.message.edit_reply_markup(reply_markup=None)
    if action == "registration":
        await state.set_state(CustomerRegistration.fio)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û",reply_markup=None)
        await callback.answer()
    elif action == "newform":
        await state.set_state(NewForm.city)
        cities = []
        for i in city_info:
            if i["–ì–æ—Ä–æ–¥"] != "":
                cities.append(i["–ì–æ—Ä–æ–¥"])
            else:
                break
        await state.update_data(city=cities)
        await state.update_data(n = 1)
        builder = await create_choose_city_buttons(state)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É—Ç–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞. –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, —Ç–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π.",reply_markup = builder.as_markup())
        await callback.answer()
    elif action=="forms":
        # await callback.message.delete()
        forms = await database.get_customer_sent_request(callback.from_user.id)
        for form in forms:
            if form["status_work"]=="work":
                msg = "<b>–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ</b>\n"+"-"*30+"\n"
                msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {form['store_name']}\n"
                msg+=f"–ê–¥—Ä–µ—Å –ê: {form['adress_a']}\n"
                msg+=f"–ê–¥—Ä–µ—Å –ë: {form['adress_b']}\n"
                msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {form['price']}\n"
                msg+=f"–ö–æ–¥: {form['code']}\n"
                builder = customer_finish(form["id"])
                await callback.message.answer(text = msg,reply_markup=builder.as_markup())
            elif form["status_work"]=="sent":
                msg = "<b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n"+"-"*30+"\n"
                msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {form['store_name']}\n"
                msg+=f"–ê–¥—Ä–µ—Å –ê: {form['adress_a']}\n"
                msg+=f"–ê–¥—Ä–µ—Å –ë: {form['adress_b']}\n"
                msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {form['price']}\n"
                msg+=f"–ö–æ–¥: {form['code']}\n"
                builder = form_cancel_chat(form["id"],form["code"])
                await callback.message.answer(text = msg,reply_markup=builder.as_markup())
        await callback.answer()


        
        
#===================================–§–ò–û===================================
@router.message(CustomerRegistration.fio, FioFilter())
async def customer_fio(message: Message,state: FSMContext):
    await state.update_data(fio = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    await state.set_state(CustomerRegistration.organization)

@router.message(CustomerRegistration.fio)
async def fio_incorrectly(message: Message):
    await message.answer(
        text="–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
    )
    


#===================================–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è===================================
@router.message(CustomerRegistration.organization)
async def customer_organization(message: Message,state: FSMContext):
    await state.update_data(organization = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É")
    await state.set_state(CustomerRegistration.email)



#===================================Email===================================
@router.message(CustomerRegistration.email,EmailFilter())
async def customer_email(message: Message,state: FSMContext):
    await state.update_data(email = message.text)
    await state.set_state(CustomerRegistration.city)
    cities = []
    for i in city_info:
        if i["–ì–æ—Ä–æ–¥"]!="":
            cities.append(i["–ì–æ—Ä–æ–¥"])
        else:
            break
    await state.update_data({"city": cities, "n": 1})
    builder = await create_choose_city_buttons(state)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥. –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, —Ç–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π.",reply_markup = builder.as_markup())

@router.message(CustomerRegistration.email)
async def email_incorrectly(message: Message):
    await message.answer(
        text="–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π email, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
    )

#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –≥–æ—Ä–æ–¥–æ–≤===================================
@router.callback_query(F.data.startswith("city_"),CustomerRegistration.city)
async def customer_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    if action == "next":
        data = await state.get_data()
        n = data["n"]
        city = data['city']
        if n+1>math.ceil(len(city)/6):
            await callback.answer("–≠—Ç–æ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")
            return
        else:
            n+=1
        await state.update_data(n = n)
        builder = await create_choose_city_buttons(state)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif action == "back":
        data = await state.get_data()
        n = data["n"]
        city = data['city']
        if n-1<1:
            await callback.answer("–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞")
            return
        else:
            n-=1
        await state.update_data(n = n)
        builder = await create_choose_city_buttons(state)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif action == "break":
        await state.clear()
        await callback.message.delete()
        await callback.answer()
    else:
        await state.update_data(city = int(action))
        await state.set_state(CustomerRegistration.phone)
        builder = create_contact_button()
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",reply_markup=builder.as_markup(resize_keyboard=True))
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()


# #===================================–ì–æ—Ä–æ–¥===================================
# @router.message(CustomerRegistration.city)
# async def customer_city(message: Message,state: FSMContext):
#     await state.update_data(city = message.text)
#     builder = create_contact_button()
#     await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",reply_markup=builder.as_markup(resize_keyboard=True))
#     await state.set_state(CustomerRegistration.phone)


#===================================–ù–æ–º–µ—Ä –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏===================================
@router.message(CustomerRegistration.phone,(F.contact!=None and F.contact.user_id == F.from_user.id))
async def customer_contact(message:Message,state: FSMContext,bot:Bot):
    await state.update_data(phone=message.contact.phone_number)
    data = await state.get_data()
    await state.clear()
    msg = await message.answer("„Ö§",reply_markup=ReplyKeyboardRemove())
    await msg.delete()
    link = city_info[data["city"]]["—Å—Å—ã–ª–∫–∞"]
    builder = create_newform_button(link)
    await message.answer(text=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º –º–µ–Ω—é –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –≥–æ—Ä–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",reply_markup= builder.as_markup())
    new_customer = {
        "username": message.from_user.username,
        "user_id":message.from_user.id,
        "date_registration":str(date.today()),
        "fio":data["fio"],
        "city":city_info[data["city"]]["–ì–æ—Ä–æ–¥"],
        "phone":data["phone"],
        "email":data["email"],
        "organization":data["organization"]
    }
    await database.set_customer(new_customer)



#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤ –∑–∞—è–≤–∫–µ===================================
@router.callback_query(F.data.startswith("city_"),NewForm.city)
async def customer_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    if action == "next":
        data = await state.get_data()
        n = data["n"]
        city = data['city']
        if n+1>math.ceil(len(city)/6):
            await callback.answer("–≠—Ç–æ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")
            return
        else:
            n+=1
        await state.update_data(n = n)
        builder = await create_choose_city_buttons(state)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif action == "back":
        data = await state.get_data()
        n = data["n"]
        city = data['city']
        if n-1<1:
            await callback.answer("–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞")
            return
        else:
            n-=1
        await state.update_data(n = n)
        builder = await create_choose_city_buttons(state)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif action == "break":
        await state.clear()
        await callback.message.delete()
        await callback.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
    else:
        await state.set_state(NewForm.store_name)
        await state.update_data(city = int(action))
        builder = create_none_store_button()
        msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",reply_markup=builder.as_markup())
        await state.update_data(last_msg = msg.message_id)
        await callback.answer()



#===================================–ú–∞–≥–∞–∑–∏–Ω===================================
@router.message(NewForm.store_name)
async def form_store(message: Message,state: FSMContext):
    await state.update_data(store_name = message.text)
    builder = cancel_form_button()
    msg = await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ (—á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏), –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (–ü—É–Ω–∫—Ç –ê).",reply_markup=builder.as_markup())
    await state.update_data(last_msg=msg.message_id)
    await state.set_state(NewForm.adress_a)
@router.callback_query(F.data == "none_store",NewForm.store_name)
async def form_none_store(callback: CallbackQuery,state: FSMContext):
    await state.update_data(store_name="–ù–µ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.")
    builder = cancel_form_button()
    msg = await callback.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ (—á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏) –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (–ü—É–Ω–∫—Ç –ê)",reply_markup=builder.as_markup())
    await state.update_data(last_msg=msg.message_id)
    await state.set_state(NewForm.adress_a)


#===================================–ê–¥—Ä–µ—Å-–ê===================================
@router.message(NewForm.adress_a, F.location!=None)
async def form_adress_a(message: Message,state: FSMContext,bot:Bot):
    coordinate = f"{message.location.latitude},{message.location.longitude}"
    await state.update_data(adress_a =  coordinate)
    data = await state.get_data()
    await bot.edit_message_reply_markup(chat_id=message.chat.id,message_id=data["last_msg"],reply_markup=None)
    builder = cancel_form_button()
    msg = await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (–ü—É–Ω–∫—Ç –ë)",reply_markup=builder.as_markup())
    await state.update_data(last_msg=msg.message_id)
    await state.set_state(NewForm.adress_b)

@router.message(NewForm.adress_a, F.location==None)
async def form_adress_a_incorrectly(message: Message,state: FSMContext,bot:Bot):
    data = await state.get_data()
    await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=data["last_msg"], reply_markup=None)
    builder = cancel_form_button()
    msg = await message.answer("–û—à–∏–±–∫–∞! –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. "
                               "–≤\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                               reply_markup=builder.as_markup())
    await state.update_data(last_msg=msg.message_id)

#===================================–ê–¥—Ä–µ—Å-–ë===================================
@router.message(NewForm.adress_b, F.location!=None)
async def form_adress_b(message: Message,state: FSMContext,bot:Bot):
    coordinate = f"{message.location.latitude},{message.location.longitude}"
    await state.update_data(adress_b=coordinate)
    data = await state.get_data()
    await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=data["last_msg"], reply_markup=None)
    builder = cancel_form_button()
    msg = await message.answer(f"–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {get_bet()})",
                               reply_markup=builder.as_markup())
    await state.update_data(last_msg=msg.message_id)
    await state.set_state(NewForm.cash)

@router.message(NewForm.adress_b, F.location==None)
async def form_adress_a_incorrectly(message: Message,state: FSMContext,bot:Bot):
    data = await state.get_data()
    await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=data["last_msg"], reply_markup=None)
    builder = cancel_form_button()
    msg = await message.answer("–û—à–∏–±–∫–∞! –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                               reply_markup=builder.as_markup())
    await state.update_data(last_msg=msg.message_id)

#===================================–°—Ç–æ–∏–º–æ—Å—Ç—å===================================
@router.message(NewForm.cash)
async def form_store(message: Message,state: FSMContext,bot:Bot):
    builder = cancel_form_button()
    data = await state.get_data()
    await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=data["last_msg"], reply_markup=None)
    try:
        if int(message.text)<get_bet():
            msg = await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {get_bet()}!", reply_markup=builder.as_markup())
            await state.update_data(last_msg=msg.message_id)
            return
    except ValueError:
        msg = await message.answer("–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–æ–º!", reply_markup=builder.as_markup())
        await state.update_data(last_msg=msg.message_id)
        return
    await state.update_data(cash = message.text)
    data["cash"] = message.text
    msg = "–í–µ—Ä–Ω—ã –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?"
    msg += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    city = city_info[data["city"]]["–ì–æ—Ä–æ–¥"]
    msg+=f"–ì–æ—Ä–æ–¥: {city}\n"
    msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {data['store_name']}\n"
    adress_a = ", ".join(geolocator.reverse(data['adress_a']).address.split(", ")[:4])
    adress_b = ", ".join(geolocator.reverse(data['adress_b']).address.split(", ")[:4])
    msg+=f"–ê–¥—Ä–µ—Å –ê:  <code>{adress_a}</code>\n"
    msg+=f"–ê–¥—Ä–µ—Å –ë:  <code>{adress_b}</code>\n"
    msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['cash']}\n"
    builder = create_customer_send_form_buttons()
    await message.answer(msg,reply_markup=builder.as_markup())



#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö===================================
@router.callback_query(F.data.startswith("form_"))
async def customer_form_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    if action == "send":
        data = await state.get_data()
        alphabet = list("abcdefghijklmnopqrstuvwxyz")
        upp = list("abcdefghijklmnopqrstuvwxyz".upper())
        code_array = alphabet+upp+list("1234567890")
        code=""
        for i in range(5):
            code+=random.choice(code_array)
        await callback.message.delete()
        chat_id = city_info[data["city"]]["chat id"]
        await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –≥–æ—Ä–æ–¥–∞.")
        await callback.answer()
        msg = "<b>–ó–ê–Ø–í–ö–ê</b>"
        msg += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        data = await state.get_data()
        msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {data['store_name']}\n"
        city = city_info[data["city"]]["–ì–æ—Ä–æ–¥"]
        msg+=f"–ì–æ—Ä–æ–¥: {city}\n"
        adress_a = ", ".join(geolocator.reverse(data['adress_a']).address.split(", ")[:4])
        adress_b = ", ".join(geolocator.reverse(data['adress_b']).address.split(", ")[:4])
        msg += f"–ê–¥—Ä–µ—Å –ê:  <code>{adress_a}</code>\n"
        msg += f"–ê–¥—Ä–µ—Å –ê:  <code>{adress_b}</code>\n"
        msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data['cash']}\n"
        msg = await bot.send_message(chat_id = chat_id, text = msg)
        newreq = {
            "username_customer":callback.from_user.username,
            "user_id_customer":callback.from_user.id,
            "date_registration":str(date.today()),
            "status_work":"sent",
            "adress_a":data["adress_a"],
            "adress_b":data["adress_b"],
            "code":code,
            "price":int(data["cash"]),
            "store_name":data["store_name"],
            "message_id":msg.message_id,
            "chat_id":chat_id
        }
        await database.set_request(newreq)
        builder = create_form_buttons(await database.get_request_id(msg.message_id))
        await bot.edit_message_reply_markup(chat_id=chat_id,message_id=msg.message_id,reply_markup=builder.as_markup())
        await state.clear()
        await callback.answer()
        set_city_stat("record_new", chat_id)
    elif action == "repeat":
        await callback.message.delete()
        await state.set_state(NewForm.city)
        cities = []
        for i in city_info:
            if i["–ì–æ—Ä–æ–¥"] != "":
                cities.append(i["–ì–æ—Ä–æ–¥"])
            else:
                break
        await state.update_data(city=cities)
        await state.update_data(n = 1)
        builder = await create_choose_city_buttons(state)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É—Ç–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞. –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, —Ç–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π.",reply_markup = builder.as_markup())
        await callback.answer()
    else:
        await callback.message.delete()
        await state.clear()
        await callback.answer()

#===================================–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã===================================
@router.callback_query(F.data == "cancel_form")
async def cancel_form(callback: types.CallbackQuery,state:FSMContext):
    await state.clear()
    await start_call_handler(callback,state)

#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∑–∞—è–≤–∫–µ===================================
@router.callback_query(F.data.startswith("request_"))
async def customer_forms_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    if not(await database.check_courier(user_id = callback.from_user.id)):
        await callback.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –∫–∞–∫ –∫—É—Ä—å–µ—Ä. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.")
        return
    courier = await database.get_courier(user_id = callback.from_user.id)
    if courier["status_payment"]==False or courier["verification"]==False:
        await callback.answer(f"–í—ã –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–∞.")
        return
    action = callback.data.split("_")[1]
    if action == "chat":
        pass
    else:
        form = await database.get_request(int(action))
        # if form["user_id_customer"]==callback.from_user.id:
        #     await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–≤–æ—é –∑–∞—è–≤–∫—É.")
        #     return
        msg = "<b>–ù–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç–≤–µ—Ç–∏–ª–∏</b>\n"+"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+"\n"
        msg+="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—å–µ—Ä–µ:\n"
        msg+=f"–§–ò–û: {courier['fio']}\n"
        msg+=f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {courier['phone']}\n"
        msg += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {courier['n_score']}\n"
        if courier['n_score']>0:
            msg += f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {courier['score']/round(courier['n_score'],2)}\n"
        else:
            msg += f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 0\n"
        msg+="‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {form['store_name']}\n"
        adress_a = ", ".join(geolocator.reverse(form['adress_a']).address.split(", ")[:4])
        adress_b = ", ".join(geolocator.reverse(form['adress_b']).address.split(", ")[:4])
        msg += f"–ê–¥—Ä–µ—Å –ê:  <code>{adress_a}</code>\n"
        msg += f"–ê–¥—Ä–µ—Å –ë:  <code>{adress_b}</code>\n"
        msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {form['price']}\n"
        msg+=f"–ö–æ–¥: {form['code']}\n"
        builder = status_work()
        await bot.edit_message_reply_markup(chat_id=form["chat_id"],message_id=form["message_id"],reply_markup=builder.as_markup())
        customer_message = await bot.send_message(chat_id = form["user_id_customer"], text = msg,reply_markup=form_cancel_chat(int(action),callback.from_user.id,form["code"]))
        msg = "<b>–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–∞—è–≤–∫—É</b>"
        msg += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {form['store_name']}\n"
        msg += f"–ê–¥—Ä–µ—Å –ê:  <code>{adress_a}</code>\n"
        msg += f"–ê–¥—Ä–µ—Å –ë:  <code>{adress_b}</code>\n"
        msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {form['price']}\n"
        msg+=f"–ö–æ–¥: {form['code']}\n"
        msg = await bot.send_message(chat_id = callback.from_user.id, text = msg,reply_markup=courier_start_finish(int(action),customer_message.message_id,form["user_id_customer"],form["code"]))
        await database.change_status_work(int(action),"call")
        await database.set_request_courier(int(action),callback.from_user.id, msg.message_id)

@router.callback_query(StartFinishCourier.filter(F.action=="start"))
async def callbacks_start_courier(
        callback: types.CallbackQuery,
        callback_data: StartFinishCourier,
        bot:Bot, state:FSMContext
):
    form = await database.get_request(callback_data.request_id)
    form["id"]=callback_data.request_id
    await bot.edit_message_reply_markup(chat_id=form["user_id_customer"], message_id=callback_data.customer_message_id,
                                        reply_markup=start_chat_button(callback.from_user.id,form["code"]))
    await state.set_state(Location.location)
    await state.update_data({"request_info": form,"customer_message_id":callback_data.customer_message_id})
    await database.change_status_work(callback_data.request_id, "work")
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–µ –∑–∞–∫–∞–∑—á–∏–∫—É")
    await callback.message.delete()
    await callback.answer()

@router.callback_query(StartFinishCourier.filter(F.action=="finish"))
async def callbacks_cancel_courier(
        callback: types.CallbackQuery,
        callback_data: StartFinishCourier,
        bot:Bot
):

    form = await database.get_request(callback_data.request_id)
    if form["status_work"] == "finish" or form["status_work"] == "sent":
        await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É.")
        return
    await database.change_status_work(callback_data.request_id, "sent")
    await callback.message.delete()
    await bot.send_message(chat_id=form["user_id_customer"],
                           text=f"–ö—É—Ä—å–µ—Ä –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ —Å –∫–æ–¥–æ–º <b>{form['code']}</b>.\n–ó–∞—è–≤–∫–∞ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–∞.")
    await bot.delete_message(chat_id=form["user_id_customer"],message_id=callback_data.customer_message_id)
    builder = create_form_buttons(await database.get_request_id(form["message_id"]))
    await bot.edit_message_reply_markup(chat_id=form["chat_id"], message_id=form["message_id"],
                                        reply_markup=builder.as_markup())
    await callback.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.")


#===================================–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –≤ –º–µ–Ω—é –∫–∞—Å—Ç–æ–º–µ—Ä–∞===================================
@router.callback_query(F.data.startswith("formcancel_"))
async def customer_forms_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    form = await database.get_request(int(action))
    await database.change_status_work(int(action),"finish")
    try:
        await callback.message.delete()
        await bot.delete_message(chat_id=form["chat_id"],message_id=form["message_id"])
        if (form["message_courier_id"]):
            await bot.delete_message(chat_id=form["courier_id"], message_id=form["message_courier_id"])
            await bot.send_message(chat_id=form["courier_id"], text=f"–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É —Å –∫–æ–¥–æ–º {form['code']}. –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
    except:
        pass
    finally:
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        set_city_stat("record_cancel", form["chat_id"])

#===================================–ö–æ–ª–±–µ–∫ –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–≤–∞—Ä–∞===================================
# @router.callback_query(F.data.startswith("start_courier_"))
# async def customer_forms_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
#     action = callback.data.split("_")[2]
#     form = await database.get_request(int(action))
#     await bot.edit_message_reply_markup(chat_id=form["user_id_customer"],message_id=form["message_id"],reply_markup=None)
#     await state.set_state(Location.location)
#     await state.update_data({"request_info":form})
#     await database.change_status_work(int(action),"work")
#     await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–µ –∑–∞–∫–∞–∑—á–∏–∫—É")
#     await callback.message.delete()
#     await callback.answer()

#===================================–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏===================================
@router.message(Location.location, (F.location!=None and F.location.live_period!=None))
async def courier_location(message: Message, state: FSMContext,bot:Bot) -> None:
    await state.update_data(location=message.location)
    await state.update_data(translation=message)
    data = await state.get_data()
    msg = await bot.send_location(chat_id=data["request_info"]["user_id_customer"], latitude=data["location"].latitude, longitude=data["location"].longitude, live_period=message.location.live_period)
    await state.update_data({"message_id":msg.message_id,"chat_id":msg.chat.id})
    form = data["request_info"]
    msg = "<b>–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞</b>"
    msg+="\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    msg += f"–ú–∞–≥–∞–∑–∏–Ω: {form['store_name']}\n"
    adress_a = ", ".join(geolocator.reverse(form['adress_a']).address.split(", ")[:4])
    adress_b = ", ".join(geolocator.reverse(form['adress_b']).address.split(", ")[:4])
    msg += f"–ê–¥—Ä–µ—Å –ê:  <code>{adress_a}</code>\n"
    msg += f"–ê–¥—Ä–µ—Å –ë:  <code>{adress_b}</code>\n"
    msg += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {form['price']}\n"
    msg += f"–ö–æ–¥: {form['code']}\n"
    href = f"maps.yandex.ru/?rtext={form['adress_a']}~{form['adress_b']}&rtt=mt"
    msg += f'–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç: <a href = "{href}">–ú–∞—Ä—à—Ä—É—Ç</a>\n'
    await message.answer(text = msg,reply_markup=translatelocation_buttons(form['user_id_customer'],form["code"]),parse_mode="HTML")
    await state.set_state(Location.translation)
@router.message(Location.location, F.location!=None)
async def courier_location_uncorrectly_callback(message: Message):
    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")


@router.edited_message(Location)
async def edited_message_handler(edited_message: types.Message,state: FSMContext,bot:Bot) -> None:
    data = await state.get_data()
    if edited_message.location!=None:
        if edited_message.location.live_period!=None:
            await bot.edit_message_live_location(chat_id=data["chat_id"],message_id=data["message_id"],
                                             latitude=edited_message.location.latitude,
                                             longitude=edited_message.location.longitude)


@router.callback_query(Location.translation, F.data == "finishrequest")
async def finishrequest(callback:CallbackQuery,state:FSMContext,bot:Bot):
    data = await state.get_data()
    await state.clear()
    await bot.delete_message(chat_id=data["chat_id"],message_id=data["message_id"])
    await bot.delete_message(chat_id=data["translation"].chat.id,message_id=data["translation"].message_id)
    await bot.delete_message(chat_id=data["request_info"]["chat_id"],message_id=data["request_info"]["message_id"])
    await bot.delete_message(chat_id=data["request_info"]["user_id_customer"],message_id=data["customer_message_id"])
    await bot.send_message(chat_id=data["request_info"]["user_id_customer"],text=f"–ö—É—Ä—å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –∑–∞—è–≤–∫–µ —Å –∫–æ–¥–æ–º {data['request_info']['code']}.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–± –æ–ø–ª–∞—Ç–µ, –∞ —Ç–∞–∫–∂–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é –æ—Ü–µ–Ω–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",reply_markup=add_score_button(data['request_info']['courier_id'],data['request_info']['id']))
    await callback.message.answer(f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –∑–∞—è–≤–∫–µ —Å –∫–æ–¥–æ–º {data['request_info']['code']}.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
    await callback.message.delete()

    await callback.answer()

@router.callback_query(AddScore.filter())
async def add_score(callback: types.CallbackQuery,callback_data: AddScore,state:FSMContext):
    if callback_data.score!=0:
        await database.add_score_courier(callback_data.courier_id,callback_data.score)
        await callback.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ü–µ–Ω–∫—É")
    await database.change_status_work(callback_data.request_id, "finish")
    await start_call_handler(callback,state)

#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∑–∞—è–≤–∫–µ –≤ —Ä–∞–±–æ—Ç–µ===================================
@router.callback_query(F.data.startswith("finish_"))
async def all_form_button_callback(callback: types.CallbackQuery,bot: Bot):
    autor = callback.data.split("_")[1]
    id = callback.data.split("_")[2]
    if autor=="customer":
        await database.change_status_work(int(id),"finish")
        form = await database.get_request(int(id))
        try:
            await bot.delete_message(chat_id=form["chat_id"],message_id=form["message_id"])
            await callback.message.delete()
        except:
            pass
        finally:
            await callback.answer("–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            set_city_stat("record_done", callback.message.chat.id)
    # else:
    #     form = await database.get_request(int(id))
    #     if form["status_work"]=="finish" or form["status_work"]=="sent":
    #         await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É.")
    #         return
    #     await database.change_status_work(int(id),"sent")
    #     await callback.message.delete()
    #
    #     await bot.send_message(chat_id=form["user_id_customer"],text=f"–ö—É—Ä—å–µ—Ä –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ —Å –∫–æ–¥–æ–º <b>{form['code']}</b>.\n–ó–∞—è–≤–∫–∞ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–∞.")
    #     builder = create_form_buttons(await database.get_request_id(form["message_id"]))
    #     await bot.edit_message_reply_markup(chat_id=form["chat_id"], message_id=form["message_id"],
    #                                         reply_markup=builder.as_markup())
    #     await callback.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.")


#===================================–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å===================================
class Answer(StatesGroup):
    SetAnswer = State()


@router.callback_query(F.data.startswith("answer"))
async def request_chat(call: CallbackQuery, state: FSMContext, bot: Bot):
    msg = await bot.send_message(call.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∫—É—Ä—å–µ—Ä—É",
                           reply_markup=custom_btn("–û—Ç–º–µ–Ω–∞", "start"))
    await state.set_state(Answer.SetAnswer)
    await state.update_data({"courier_id": call.data.split("_")[-1], "del": msg.message_id})


@router.message(Answer.SetAnswer)
async def request_chat(mess: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    try:
        await bot.edit_message_reply_markup(mess.chat.id, data["del"], reply_markup=None)
    except:
        pass
    if not check_test(mess.text):
        await state.update_data({"text": mess.text})
        await mess.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:\n\n"
                          f"{mess.text}", reply_markup=confirmation(canc_data="start"))
    else:
        msg = await mess.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –£–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤!")
        await state.update_data({"del": msg.message_id})


@router.callback_query(F.data.startswith("yes"), Answer.SetAnswer)
async def request_chat(call: CallbackQuery, state: FSMContext, bot: Bot):
    data_state = await state.get_data()
    await bot.send_message(data_state["courier_id"], f"–û—Ç–≤–µ—Ç –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞:\n\n{data_state['text']}")
    await call.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.clear()


@router.callback_query(Chat.filter())
async def request_chat(callback: CallbackQuery,callback_data:Chat, state:FSMContext):
    if await state.get_state():
        pass
    else:
        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É")
        await state.set_state(ChatState.message)
        await state.update_data({"info":[callback_data.user_id,callback_data.code]})
        await callback.answer()
@router.message(ChatState.message)
async def send_message_chat(message: Message,state:FSMContext,bot:Bot):
    data = await state.get_data()
    msg = f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ —Å –∫–æ–¥–æ–º {data['info'][1]}"
    msg+="\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    msg+=message.text

    await bot.send_message(chat_id=data["info"][0],text=msg,reply_markup=answer_chat_button(message.from_user.id,data["info"][1]))

@router.callback_query(AnswerChat.filter())
async def answer_chat(callback: CallbackQuery,callback_data:Chat,bot:Bot):
    msg = f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ —Å –∫–æ–¥–æ–º {callback_data.request_code}"
    msg += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    msg += "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ."
    await bot.send_message(chat_id=callback_data.user_id,text=msg)
    await callback.answer()