from aiogram import Router, F, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, StateFilter, Command

from core.keyboards.inline import *
from core.database import database
from core.message.text import get_text_start_mess
from core.administrate.administrete import check_code_admin

router = Router()


class SupportQuestion(StatesGroup):
    SetQuestion = State()


@router.message(CommandStart(), StateFilter(None))
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    try:
        if check_code_admin(int(message.text.split(" ")[-1])):
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            await database.save_new_admin(message.from_user.id)
            return
    except:
        pass
    builder = await create_start_buttons(message.from_user.id)
    await message.answer(get_text_start_mess(), reply_markup=builder.as_markup())
    if not (await database.check_user(user_id=message.from_user.id)):
        await database.set_new_user(user_id=message.from_user.id, username=message.from_user.first_name)
    return


@router.callback_query(SupportQuestion.SetQuestion, F.data == "start")
@router.callback_query(F.data == "start", StateFilter(None))
async def start_call_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    builder = await create_start_buttons(call.from_user.id)
    await call.message.edit_text(get_text_start_mess(), reply_markup=builder.as_markup())
    return


#===================================–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É===================================
@router.callback_query(F.data == "support")
@router.callback_query(SupportQuestion.SetQuestion, F.data == "no")
async def support_chat(call: CallbackQuery, state: FSMContext):
    msg = await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É:",
                                 reply_markup=custom_btn("–û—Ç–º–µ–Ω–∞", "start"))
    await state.set_state(SupportQuestion.SetQuestion)
    await state.update_data({"del": msg.message_id})


@router.message(SupportQuestion.SetQuestion)
async def support_chat(mess: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    try:
        await bot.edit_message_reply_markup(mess.chat.id, data["del"], reply_markup=None)
    except:
        pass
    await state.update_data({"text": mess.text})
    await mess.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:\n\n"
                      f"{mess.text}", reply_markup=confirmation(canc_data="start"))


@router.callback_query(F.data == "yes", SupportQuestion.SetQuestion)
async def support_chat(call: CallbackQuery, state: FSMContext, bot: Bot):
    data_state = await state.get_data()
    await bot.send_message(settings.bots.chat_id,
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                           f"–ò–º—è: [{call.from_user.first_name}](tg://user?id={call.from_user.id})\n"
                           f"–°—Å—ã–ª–∫–∞: @{call.from_user.username}\n"
                           f"–û–±—Ä–∞—â–µ–Ω–∏–µ:\n\n{data_state['text']}", parse_mode="Markdown")
    await call.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.clear()


@router.message(Command("info"), StateFilter(None))
async def information_message(message: Message):
    await message.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëá", reply_markup=information())
    return
